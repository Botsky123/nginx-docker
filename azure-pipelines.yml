# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'fc95c664-7891-4a04-ac59-1b03b8dc7c16'
  imageRepository: 'botskynginxdocker'
  containerRegistry: 'testcontainerregistrydemo.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ACRTasks/dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    
    # New task to update Trivy DB
    - task: CmdLine@2
      displayName: 'Update Trivy DB'
      inputs:
        script: |
          docker run --rm -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --download-db-only

    - task: CmdLine@2
      displayName: 'Scan for CRITICAL vulnerabilities'
      inputs:
        script: |
          set +e
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --severity CRITICAL --no-progress --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
          scan_exit=$?
          set -e
          if [ $scan_exit -eq 0 ]; then
            echo "No CRITICAL vulnerabilities found."
          else
            echo "Scan completed with warnings or errors."
            exit $scan_exit
          fi
        failOnStderr: false # Set to false to allow handling of exit codes manually

    - task: CmdLine@2
      displayName: 'Scan for MEDIUM, HIGH vulnerabilities'
      inputs:
        script: |
          set +e
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --severity MEDIUM,HIGH --no-progress --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
          scan_exit=$?
          set -e
          if [ $scan_exit -eq 0 ]; then
            echo "No MEDIUM or HIGH vulnerabilities found."
          else
            echo "Scan completed with warnings or errors for MEDIUM or HIGH vulnerabilities."
            # Exit based on your requirement or handle differently
            exit $scan_exit
          fi
        failOnStderr: false # Set to false to allow handling of exit codes manually
