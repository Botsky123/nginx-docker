trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'docker_registry_service_connection'
  imageRepository: 'botskynginxdocker'
  containerRegistry: 'testcontainerregistrydemo1.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ACRTasks/dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

- stage: Scan
  displayName: 'Scan stage'
  jobs:
  - job: Scan
    displayName: 'Scan for Vulnerabilities'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: CmdLine@2
      displayName: 'Update Trivy DB'
      inputs:
        script: |
          docker run --rm -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --download-db-only
    - task: CmdLine@2
      displayName: 'Scan for vulnerabilities'
      inputs:
        script: |
          set +e
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --severity CRITICAL,MEDIUM,HIGH --no-progress --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
          scan_exit=$?
          set -e
          if [ $scan_exit -ne 0 ]; then
            echo "Vulnerabilities found."
            exit $scan_exit
          fi

- stage: Push
  displayName: 'Push stage'
  condition: succeeded('Scan')
  jobs:
  - job: Push
    displayName: 'Push to ACR'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Push image to ACR'
      inputs:
        command: push
        repository: $(imageRepository)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
