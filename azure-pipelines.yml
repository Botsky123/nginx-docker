# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'docker_registry_service_connection'
  imageRepository: 'botskynginxdocker'
  containerRegistry: 'testcontainerregistrydemo.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ACRTasks/dockerfile'
  tag: '$(Build.BuildId)'
  vmImageName: 'ubuntu-latest'
  clair_db: 'arminc/clair-db:latest'
  clair_scan: 'arminc/clair-local-scan:latest'
  clair_scanner: 'objectiflibre/clair-scanner:latest'
  report_directory: 'report'
  clairServerUrl: 'http://20.15.109.18:6060'

stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build an image
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

    - script: |
        docker save -o $(imageRepository).tar $(imageRepository):$(tag)
      displayName: 'Save Docker image to tarball'

    - script: |
        wget https://github.com/arminc/clair-scanner/releases/download/v12/clair-scanner_linux_amd64
        mv clair-scanner_linux_amd64 clair-scanner
        chmod +x clair-scanner
      displayName: 'Install clair-scanner'

    - script: |
        ./clair-scanner --clair="${clairServerUrl}" --ip="10.0.0.5" --reportAll=true --log=debug --reportPath=clair-report.json $(imageRepository).tar || true
      displayName: 'Scan Docker image with clair-scanner'
      env:
        10.0.0.5: 'Host IP where Clair can reach this scanner'

    - script: |
        if grep -q "High" clair-report.json; then
          echo "High vulnerabilities found, failing build"
          exit 1
        fi
      displayName: 'Check for vulnerabilities'

    - task: Docker@2
      displayName: Push an image to container registry
      inputs:
        command: push
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)