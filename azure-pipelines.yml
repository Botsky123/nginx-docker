trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'docker_registry_service_connection'
  imageRepository: 'botskynginxdocker'
  containerRegistry: 'testcontainerregistrydemo1.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/ACRTasks/dockerfile'
  tag: '74'
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build Docker Image'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        command: build
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        tags: |
          $(tag)

    - script: docker images
      displayName: 'List Docker Images'

- stage: Scan
  displayName: 'Scan stage'
  jobs:
  - job: Scan
    displayName: 'Scan for Vulnerabilities'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: AzureCLI@2
      displayName: 'Login to Azure Container Registry'
      inputs:
        azureSubscription: 'azure_service_connection'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login --name testcontainerregistrydemo1

    - task: CmdLine@2
      displayName: 'Download and install Trivy'
      inputs:
        script: |
          #!/bin/bash
          # Specify the Trivy version
          trivyVersion="0.19.2"
          # Construct the download URL
          downloadUrl="https://github.com/aquasecurity/trivy/releases/download/v${trivyVersion}/trivy_${trivyVersion}_Linux-64bit.deb"
          # Download Trivy
          wget $downloadUrl -O trivy.deb
          # Install Trivy
          sudo dpkg -i trivy.deb

    
    - task: CmdLine@2
      displayName: Scanning Docker Image
      inputs:
        script: |
          #!/bin/bash
          # Scan the image with Trivy
          # Exit code 0 for MEDIUM, HIGH to not fail the pipeline but show vulnerabilities
          trivy image --exit-code 0 --severity MEDIUM,HIGH ${{ variables.containerRegistry }}/${{ variables.imageRepository }}:${{ variables.tag }}
          # Exit code 1 for CRITICAL to fail the pipeline if critical vulnerabilities are found
          trivy image --exit-code 1 --severity CRITICAL ${{ variables.containerRegistry }}/${{ variables.imageRepository }}:${{ variables.tag }}
    
    
    # - task: CmdLine@2
    #   displayName: 'Update Trivy DB'
    #   inputs:
    #     script: |
    #       docker run --rm -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --download-db-only
    # - task: CmdLine@2
    #   displayName: 'Scan for vulnerabilities'
    #   inputs:
    #     script: |
    #       set +e
    #       docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/.cache/trivy:/root/.cache/ aquasec/trivy image --severity CRITICAL,MEDIUM,HIGH --no-progress --ignore-unfixed $(containerRegistry)/$(imageRepository):$(tag)
    #       scan_exit=$?
    #       set -e
    #       if [ $scan_exit -ne 0 ]; then
    #         echo "Vulnerabilities found."
    #         exit $scan_exit
    #       fi

- stage: Push
  displayName: 'Push stage'
  condition: succeeded('Scan')
  jobs:
  - job: Push
    displayName: 'Push Image to ACR'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: 'Push image to ACR'
      inputs:
        command: push
        repository: $(containerRegistry)/$(imageRepository):$(tag)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: $(tag)
   
